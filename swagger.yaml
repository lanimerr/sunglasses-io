---
swagger: "2.0"
info:
  title: Sunglasses Eval
  description: An API for an upcoming business selling sunglasses [A test].
  version: 1.0.0

host: localhost:3001

tags:
  - name: brands
    description: brands avaialable
  - name: products
    description: the avaialable products
  - name: login
    description: a place for user to login
  - name: me/cart
    description: cart information
schemes:
  - https
basePath: /
produces:
  - application/json
paths:
  /brands:
    get:
      tags:
        - brands
      summary: brand types
      description: |
        The Brands endpoint will return a list of brands
      parameters: []
      responses:
        "200":
          description: An array of brands
          schema:
            type: array
            items:
              $ref: "#/definitions/Brands"
        "400":
          description: Unexpected error
          schema:
            $ref: "#/definitions/Error"
  /brands/{brandId}/products:
    get:
      tags:
        - products
      summary: Get product brand
      description: |
        Return a list of products per brand from the Sunglasses store
      parameters:
        - name: brandId
          in: path
          description: Id number of the brand
          required: true
          type: string
      responses:
        "200":
          description: An array of products of that given brand
          schema:
            type: array
            items:
              $ref: "#/definitions/Products"
        "400":
          description: This brand cannot be found
          schema:
            $ref: "#/definitions/Error"
        "404":
          description: URL not recognized
          schema:
            $ref: "#/definitions/Error"
  /products:
    get:
      tags:
        - products
      summary: All Sunglasses
      description: |
        All products in the store will be returned
      parameters: []
      responses:
        "200":
          description: An array of products
          schema:
            $ref: "#/definitions/Products"
        "400":
          description: Unexpected error
          schema:
            $ref: "#/definitions/Error"
  /login:
    post:
      tags:
        - login
      summary: User Login
      description: |
        Allows user to login so that they can view and edit their cart
      parameters:
        - in: body
          name: login
          description: Username and password
          required: false
          schema:
            $ref: "#/definitions/Users/properties/login"
      responses:
        "200":
          description: User loges in and has access
          schema:
            $ref: "#/definitions/Users"
        "201":
          description: Successful response token created
          schema:
            type: array
            items:
              $ref: "#/definitions/login_response"
        "401":
          description: unauthorized user
          schema:
            $ref: "#/definitions/Error"
        "400":
          description: Either missing username or password
          schema:
            $ref: "#/definitions/Error"
  /me/cart:
    get:
      tags:
        - me/cart
      summary: User's cart
      description: |
        The users cart endpoint will return all items the user has added to their cart
      parameters: []
      security:
        - basicAuth: []
      responses:
        "200":
          description: User's current cart
          schema:
            $ref: "#/definitions/Cart"
        "400":
          description: bad request
          schema:
            $ref: "#/definitions/Error"
        "401":
          description: unauthorized to access store
          schema:
            $ref: "#/definitions/Error"
    post:
      tags:
        - me/cart
      summary: User's will add an item to their cart
      description: |
        The user will be able to add objects to their cart
      parameters: []
      security:
        - basicAuth: []
      responses:
        "201":
          description: item added to cart
          schema:
            $ref: "#/definitions/Cart"
        "400":
          description: bad request
          schema:
            $ref: "#/definitions/Error"
        "401":
          description: unauthorized to access store
          schema:
            $ref: "#/definitions/Error"
  /me/cart/{productId}:
    post:
      tags:
        - me/cart
      summary: Edit quantity
      description: |
        User is able to edit the quantity of selected product
      parameters:
        - name: productId
          in: path
          description: numeric ID of product
          required: true
          type: integer
      security:
        - basicAuth: []
      responses:
        "201":
          description: the user's current cart
          schema:
            $ref: "#/definitions/Cart"
        "400":
          description: bad request
          schema:
            $ref: "#/definitions/Error"
        "401":
          description: unauthorized to access store
          schema:
            $ref: "#/definitions/Error"
        "404":
          description: not found URL not recognized
          schema:
            $ref: "#/definitions/Error"
        "405":
          description: Method not allowed
          schema:
            $ref: "#/definitions/Error"
    delete:
      tags:
        - me/cart
      summary: Delete product
      description: |
        User is able to delete selected product
      parameters:
        - name: productId
          in: path
          description: numeric ID of product
          required: true
          type: integer
      security:
        - basicAuth: []
      responses:
        "204":
          description: No content to send back displaying updated cart
          schema:
            $ref: "#/definitions/Cart"
        "400":
          description: bad request
          schema:
            $ref: "#/definitions/Error"
        "401":
          description: unauthorized to access store
          schema:
            $ref: "#/definitions/Error"
securityDefinitions:
  basicAuth:
    type: basic
definitions:
  Brands:
    type: object
    properties:
      id:
        type: string
        description: A unique identifier for the brand of product
      name:
        type: string
        description: Name of the brand
  Products:
    type: object
    properties:
      id:
        type: string
        description: the identifier of the product in stock
      categoryId:
        type: string
        description: the identifier of the product to match up to the brand
      name:
        type: string
        description: the style of sunglasses
      description:
        type: string
        description: a verbal description of the sunglasses
      price:
        type: integer
        format: int32
        description: the price of the sunglasses
      imageUrls:
        type: array
        items:
          type: string
          description: images related to product
  Users:
    type: object
    properties:
      gender:
        type: string
        description: users gender
      cart:
        type: array
        items:
          $ref: "#/definitions/Cart"
      name:
        $ref: "#/definitions/Users_name"
      location:
        $ref: "#/definitions/Users_location"
      email:
        type: string
        description: users email
      login:
        $ref: "#/definitions/Users_login"
      dob:
        type: string
        description: users birthday
      registered:
        type: string
        description: users registration date
      phone:
        type: string
        description: users phone number
      cell:
        type: string
        description: users cellular
      picture:
        $ref: "#/definitions/Users_picture"
      nat:
        type: string
        description: users nationality
  Login:
    type: object
    properties:
      username:
        type: string
        description: username
      password:
        type: string
        description: password
  Cart:
    type: object
    properties:
      id:
        type: string
        description: the identifier representing a specific product
      name:
        type: string
        description: the name of the brand
      price:
        type: integer
        format: int32
        description: price of item
      totalPrice:
        type: integer
        format: int32
        description: total price of all items
  Error:
    type: object
    properties:
      code:
        type: integer
        format: int32
      message:
        type: string
  login_response:
    type: object
    properties:
      tokenId:
        type: string
        description: identifier for the users login token
      userAuth:
        type: string
        description: token that allows user to access their cart
  Users_name:
    type: object
    properties:
      title:
        type: string
        description: Users title
      first:
        type: string
        description: users first name
      last:
        type: string
        description: users last name
  Users_location:
    type: object
    properties:
      street:
        type: string
        description: users street address
      city:
        type: string
        description: users city
      state:
        type: string
        description: users state
      postcode:
        type: integer
        format: int32
        description: users zip code
  Users_login:
    type: object
    properties:
      username:
        type: string
        description: username
      password:
        type: string
        description: password
      salt:
        type: string
        description: salt key
      md5:
        type: string
        description: md5
      sha1:
        type: string
        description: sha1
      sha256:
        type: string
        description: sha256
  Users_picture:
    type: object
    properties:
      large:
        type: string
        description: larger imageURL of user
      medium:
        type: string
        description: med imageURL of user
      thumbnail:
        type: string
        description: thumbnail imageURL of user
